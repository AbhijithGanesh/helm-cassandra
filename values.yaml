service: {}

storageclass: local-path
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

metadata:
  release:
    Name: "release-name"
    namespace: "default"
    Service: "release-service"
  names:
    fullname: "cassandra-custom-chart"
    service_name: "cassandra-service"
    stateful_set: "cassandra-pods"
    metrics_name: "cass-metrics"
    namespace: "default"

  labels:
    app: "cassandra-chart"
    pv: "persistent-volume"

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

statefulset:
  seeds:
    seedCount: 3
    clusterDomain: {}

  serviceName: "cass-stateful-set"
  image:
    repository: gcr.io/google-samples/cassandra:v13
    tag: latest
  imagepullPolicy: IfNotPresent
  provisioner: local-path

tls:
  internodeEncryption: none
  clientEncryption: false
  autoGenerated: false
  existingSecret: ""
  passwordsSecret: ""
  keystorePassword: ""
  truststorePassword: ""
  certificatesSecret: ""
  certificateName: "test-cert"
  tlsEncryptionSecretName: ""
  resources:
    limits: {}
    requests: {}

containerPorts:
  intra: 7000
  tls: 7001
  jmx: 7199
  cql: 9042

services:
  type: ClusterIP
  cql:
    name: "cql"
    port: 9042
    nodePort: ""
  metrics:
    name: "cass-metrics"
    port: 8080
    nodePort: ""
    selector: "selector-metrics"
  extraPorts: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  clusterIP: ""
  externalTrafficPolicy: Cluster
  annotations: {}

metrics:
  image:
    registry: docker.io
    pullPolicy: IfNotPresent
    repository: bitnami/cassandra-exporter
    tag: latest
  enabled: true
  namespace: {}
  annotations: {}
  serviceMonitor:
    jobLabel: ""
    interval: ""
    scrapeTimeout: ""
    selector: {}
    metricRelabelings: []
    honorLabels: false
    additionalLabels: {}

  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"

  containerPorts:
    http: 8080
    jmx: 5555

pvc:
  name:
  accessModes: ReadWriteOnce
  volumeMode: Filesystem
  resources: {}
  storageclassname: local-path

cluster:
  clusterName: test-cluster
  datacenter: "cass-dc"
  endpointSnitch: SimpleSnitch
  seedCount: 3
  clusterDomain: "cluster"
  rack: "rack-1"

ingress:
  enabled: false

diagnosticMode:
  enabled: false

dbUser:
  user: "cass-test-user"
  existingSecret: {}

livenessProbe:
  enabled: true
  initialDelaySeconds: 45
  periodSeconds: 25
  timeoutSeconds: 5
  successsThreshold: 1
  failureThreshold: 5

cassEncryption: true
